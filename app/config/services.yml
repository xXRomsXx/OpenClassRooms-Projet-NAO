# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    users_pictures_directory: '%kernel.project_dir%/web/Images/UsersPictures'
    observations_pictures_directory : '%kernel.project_dir%/web/Images/ObservationsPictures'
    news_pictures_directory : '%kernel.project_dir%/web/Images/NewsPictures'

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\Controller\UsersController:
        arguments: 
            - '@AppBundle\Service\UsersService'

    AppBundle\Controller\ObservationsController:
        arguments: 
            - '@AppBundle\Service\ObservationsService'
            - '@AppBundle\Service\PicturesService'

    AppBundle\Controller\DashboardController:
        arguments: 
            - '@AppBundle\Service\ObservationsService'
            - '@AppBundle\Service\UsersService'

    AppBundle\Controller\ContactController:
        arguments: 
            - AppBundle\Entity\EmailContact

    # Services des repository
    AppBundle\Repository\UsersRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\Users

    AppBundle\Repository\ObservationsRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\Observations

    AppBundle\Repository\PicturesRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments:
            - AppBundle\Entity\Pictures

    # Services des entités
    AppBundle\Service\UsersService:
        public: true
        arguments:
            - '@AppBundle\Repository\UsersRepository' # Utilisation du service de repository Users
            - '@fos_user.user_manager' # utilisation du service fos user manager 

    AppBundle\Service\ObservationsService:
        public: true
        arguments:
            - '@AppBundle\Repository\ObservationsRepository' # Utilisation du service de repository Observations
            - '@doctrine.orm.entity_manager'
            - '@AppBundle\Service\UsersService'

    AppBundle\Service\PicturesService:
        public: true
        arguments:
            - '@AppBundle\Repository\PicturesRepository' # Utilisation du service de repository Pictures
            - '@doctrine.orm.entity_manager'

    # Services de formulaire lié au FOSUserBundle personnalisé
    app.form.profile:
        class: 'UserBundle\Form\Type\ProfileFormType'
        arguments: [%fos_user.model.user.class%]
        decorates: fos_user.profile.form.type # Indique le service qui sera remplacé par app.form.profile
        tags:
            - { name: form.type, alias: app_user_profile }

    app.form.registration:
        class: 'UserBundle\Form\Type\RegistrationFormType'
        arguments: [%fos_user.model.user.class%]
        decorates: fos_user.registration.form.type # Indique le service qui sera remplacé par app.form.profile
        tags:
            - { name: form.type, alias: app_user_registration } 

    app.form.changePassword:
        class: 'UserBundle\Form\Type\ChangePasswordFormType'
        arguments: [%fos_user.model.user.class%]
        decorates: fos_user.change_password.form.type # Indique le service qui sera remplacé par app.form.profile
        tags:
            - { name: form.type, alias: app_user_change_password } 

    app.form.resetting:
        class: 'UserBundle\Form\Type\ResettingFormType'
        arguments: [%fos_user.model.user.class%]
        decorates: fos_user.resetting.form.type # Indique le service qui sera remplacé par app.form.profile
        tags:
            - { name: form.type, alias: app_user_resetting }                   